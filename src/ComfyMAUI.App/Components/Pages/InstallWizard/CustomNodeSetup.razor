@using ComfyMAUI.Views

@inject ComfyNodesService comfyNodesService
@inject SettingsService settingsService
@inject GitService gitService
@implements IDisposable

<SkeletonBox OnLoad="Load">
    <Skeleton>
        <Skeleton Active="true"></Skeleton>
    </Skeleton>
    <ChildContent>
        @if (_pulling || _lines.Any())
        {
            <Flex Vertical="true" Gap="small" Class="m-4 h-[260px] overflow-y-auto bg-gray-100">
                @foreach (var line in _lines)
                {
                    <Alert Type="@AlertType.Info" Message="@line"></Alert>
                }
            </Flex>
        }
        else
        {
            <Flex Vertical="true" Gap="small" Class="m-4 h-[260px] overflow-y-auto bg-gray-100">
                @foreach (var item in _comfyNodes.GroupBy(o => o.GroupName))
                {
                    <Card Title="@item.Key" Hoverable="false" Class="mx-4">
                        <Body>
                            <Flex Gap="small" Wrap="wrap">
                                @foreach (var node in item)
                                {
                                    <div class="p-4 border-gray-400">
                                        <a href="@node.GitUrl">
                                            <TextDisplay Title="@node.Name"></TextDisplay>
                                        </a>
                                    </div>
                                }
                            </Flex>
                        </Body>
                    </Card>
                }
            </Flex>
        }
        <Divider></Divider>
        <div class="flex justify-end">
            @if (!_pulling)
            {
                <Button Type="primary" OnClick="Download">下载节点</Button>
            }
            <Button Class="ml-auto" Type="primary" Disabled="@_pulling" OnClick="ViewModel.OnNext">下一步</Button>
        </div>
    </ChildContent>
</SkeletonBox>

@code {
    [CascadingParameter]
    public InstallWizardViewModel ViewModel { get; set; } = null!;
    [CascadingParameter]
    public IHostWindowViewModel HostWindowViewModel { get; set; } = null!;
    private IReadOnlyList<ComfyNode> _comfyNodes = [];
    private Subject<bool> _disposed = new();
    private ComfyUIPythonSettings? _comfyUISettings;
    private MirrorSettings? _mirrorSettings;
    private bool _pulling;
    private List<string> _lines = [];

    private async Task Load()
    {
        _comfyNodes = await comfyNodesService.GetNodes();
        _comfyUISettings = await settingsService.Get<ComfyUIPythonSettings>(ComfyUIPythonSettings.Key);
        _mirrorSettings = await settingsService.Get<MirrorSettings>(MirrorSettings.Key);
    }

    private Task Download()
    {
        if (_comfyUISettings == null || _mirrorSettings == null) return Task.CompletedTask;

        _lines.Clear();

        var pullingObservable = Observable.Create<string>(async (observable) =>
        {
            _pulling = true;
            observable.OnNext($"开始下载");
            foreach (var node in _comfyNodes)
            {
                var nodeFolder = Path.Combine(_comfyUISettings.CustomNodesFolder, node.Name);
                if (Directory.Exists(nodeFolder))
                {
                    observable.OnNext($"{node.Name} 已经存在，跳过");
                    continue;
                }
                observable.OnNext($"开始下载 {node.Name}");
                var url = $"{_mirrorSettings.GitHubMirror.TrimEnd('/')}/{node.GitUrl}";
                await gitService.Clone(url, _comfyUISettings.CustomNodesFolder, (line) =>
                {
                    observable.OnNext(line ?? string.Empty);
                });
                observable.OnNext($"{node.Name} 下载完成");
            }
            observable.OnNext($"下载完成");
            observable.OnCompleted();
        })
        .TakeUntil(_disposed)
        .Do((line) =>
        {
            _lines.Add(line);
            this.InvokeAsync(StateHasChanged);
        });
        pullingObservable.Finally(() =>
        {
            _pulling = false;
            this.InvokeAsync(StateHasChanged);
        }).Subscribe();
        return Task.CompletedTask;
    }

   

    public void Dispose()
    {
        _disposed.OnNext(true);
        _disposed.Dispose();
    }
}
