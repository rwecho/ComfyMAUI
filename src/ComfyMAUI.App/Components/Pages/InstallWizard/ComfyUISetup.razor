@using CommunityToolkit.Maui.Storage
@using System.Collections.Concurrent
@using System.Reactive
@inject ComfyUIService comfyUIService
@inject IMessageService message
@implements IDisposable
<SkeletonBox OnLoad="Load" @ref="_skeletonBox">
    <Skeleton>
        <Skeleton Active="true"></Skeleton>
    </Skeleton>
    <ChildContent>
        <Flex Vertical="true" Gap="small" Class="m-4 flex-1">
            @{
                var hidden = _comfyUIPythonSettings == null ? "hidden" : "";
            }
            <Flex Class="@hidden" Justify="space-between" Align="center">
                <label class="font-bold">安装位置</label>
                <Flex Class="w-1/2">
                    @if(_comfyUIPythonSettings!=null)
                    {
                        <Button Type="text" OnClick="ChooseFolder" Icon="@IconType.Outline.Folder" >
                            @_comfyUIPythonSettings.InstallationPath
                        </Button>
                    }
                </Flex>
            </Flex>


            @if (!string.IsNullOrEmpty(_comfyUIVersion))
            {
                <Flex Justify="space-between" Align="center">
                    <label>ComfyUI 版本</label>
                    <Flex Class="w-1/2">
                        <Input ReadOnly Placeholder="ComfyUI 版本" @bind-Value="@_comfyUIVersion">
                        </Input>
                    </Flex>
                </Flex>
            }

            @if (!string.IsNullOrEmpty(_pythonVersion))
            {
                <Flex Justify="space-between" Align="center">
                    <label>Python 版本</label>
                    <Flex Class="w-1/2">
                        <Input ReadOnly Placeholder="Python 版本" @bind-Value="@_pythonVersion">
                        </Input>
                    </Flex>
                </Flex>
            }

            @switch(_status)
            {
                case DownloadSetupStatus.Downloading:
                    @if (_job != null)
                    {
                        if (_job.Status == null)
                        {
                            <Alert Type="@AlertType.Info" Message="准备下载 ComfyUI" />
                        }
                        else if (_job.Status.Status == "active")
                        {
                            var progress = (int)(_job.Status.CompletedLength * 1.0 / _job.Status.TotalLength * 100);

                            <Alert Type="@AlertType.Info" Message="正在下载 ComfyUI" />
                            <Progress Percent="@(progress)" />
                            <Flex Gap="small">
                                <TextDisplay IsVertical="false" Title="下载速度" Value="@_job.Status.DownloadSpeed.ToHumanReadable()" />
                                <TextDisplay IsVertical="false" Title="已下载" Value="@(_job.Status.CompletedLength.ToHumanReadable())" />
                                <TextDisplay IsVertical="false" Title="总大小" Value="@(_job.Status.TotalLength.ToHumanReadable())" />
                            </Flex>
                        }
                        else if (_job.Status.Status == "complete")
                        {
                            <Alert Type="@AlertType.Success" Message="下载完成" />
                        }
                        else if (_job.Status.Status == "error")
                        {
                            <Alert Type="@AlertType.Error" Message="下载失败" />
                        }
                    }
                    else
                    {
                        <Alert Type="@AlertType.Info" Message="正在下载 ComfyUI" />
                    }
                    break;
                case DownloadSetupStatus.Extracting:
                    @if (_text != null)
                    {
                        var text = $"正在解压文件：{_text}";
                        <Alert Type="@AlertType.Info" Message="@text" />
                    }
                    break;
                case DownloadSetupStatus.Completed:
                    <Alert Type="@AlertType.Success" Message="安装完成" />  
                    break;
            }
        </Flex>
        <Divider></Divider>
        <div class="flex justify-between">
            @if ((string.IsNullOrEmpty(_comfyUIVersion) || string.IsNullOrEmpty(_pythonVersion)) && _status == null)
            {
                <Button Type="danger" Icon="@IconType.Outline.CloudDownload" OnClick="DownloadAndSetup">下载并安装</Button>
            }
            <Button Class="ml-auto" Type="primary" Disabled="!(!string.IsNullOrEmpty( _comfyUIVersion )&& !string.IsNullOrEmpty( _pythonVersion))"
            OnClick="ViewModel.OnNext">
                下一步
            </Button>
        </div>
    </ChildContent>
</SkeletonBox>
@code {

    private string? _comfyUIVersion, _pythonVersion;

    private string _installationPath ="bin";

    private SkeletonBox? _skeletonBox;

    private Subject<bool> _disposed = new();

    private string _text = "";
    private Aria2Job? _job;

    private DownloadSetupStatus? _status;

    private ComfyUIPythonSettings? _comfyUIPythonSettings;

    private MirrorSettings? _mirrorSettings;

    [Inject]
    public IServiceProvider ServiceProvider { get; set; } = null!;

    [Inject]
    public SettingsService SettingsService { get; set; } = null!;

    [CascadingParameter]
    public InstallWizardViewModel ViewModel { get; set; } = null!;


    private async Task Load()
    {
        _comfyUIPythonSettings = await SettingsService.Get<ComfyUIPythonSettings>(ComfyUIPythonSettings.Key);

        _mirrorSettings = await SettingsService.Get<MirrorSettings>(MirrorSettings.Key);

        _pythonVersion = await comfyUIService.GetPythonVersion();
        _comfyUIVersion = await comfyUIService.GetComfyUIVersion();
    }

    private async Task ChooseFolder()
    {
        if (_comfyUIPythonSettings == null) return;
        var result = await FolderPicker.Default.PickAsync(_comfyUIPythonSettings.InstallationPath);

        if (result.IsSuccessful)
        {
            var folder = result.Folder.Path;
            _comfyUIPythonSettings.InstallationPath = folder;

            if (!Directory.Exists(folder))
            {
                Directory.CreateDirectory(folder);
            }

            await SettingsService.Set<ComfyUIPythonSettings>(ComfyUIPythonSettings.Key, _comfyUIPythonSettings);

            if (_skeletonBox != null)
            {
                await _skeletonBox.Reload();
            }
        }
    }

    private Task DownloadAndSetup()
    {
        if (_comfyUIPythonSettings == null | _mirrorSettings == null)
        {
            return Task.CompletedTask;
        }

        var viewModel = ActivatorUtilities.CreateInstance<DownloadAndSetupViewModel>(ServiceProvider);

        viewModel.StatusObservable
        .Sample(TimeSpan.FromMicroseconds(100))
        .Do((status) =>
        {
            _status = status;
            if (_status == DownloadSetupStatus.Completed)
            {
                if (_skeletonBox != null)
                    InvokeAsync(_skeletonBox.Reload);
            }
            InvokeAsync(StateHasChanged);
        })
        .Subscribe();

        viewModel.JobObservable
        .Subscribe(job =>
        {
            _job = job;
            InvokeAsync(StateHasChanged);
        });

        viewModel.ExtractFileNameObservable
         .Sample(TimeSpan.FromMicroseconds(100))
        .Subscribe(text =>
        {
            _text = text ?? "";
            InvokeAsync(StateHasChanged);
        });

        var url = "https://github.com/comfyanonymous/ComfyUI/releases/download/v0.2.7/ComfyUI_windows_portable_nvidia.7z";

        #if DEBUG
        url = "http://myhome.rwecho.top:9000/comfy-maui/ComfyUI_windows_portable_nvidia.1.7z?Content-Disposition=attachment%3B%20filename%3D%22ComfyUI_windows_portable_nvidia.1.7z%22&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=echo%2F20241104%2F%2Fs3%2Faws4_request&X-Amz-Date=20241104T140318Z&X-Amz-Expires=432000&X-Amz-SignedHeaders=host&X-Amz-Signature=8e0ce03ff6cfdd517105dd8fce0f6a432af8dbb969b0810b0ff88eea680674ac";
        #endif

        var fullUrl = $"{_mirrorSettings.GitHubMirror.TrimEnd('/')}/{url}";

        viewModel.DownloadAndSetup(fullUrl,_comfyUIPythonSettings.InstallationPath);

        return Task.CompletedTask;
    }


    public void Dispose()
    {
        _disposed.OnNext(true);
        _disposed.OnCompleted();
    }
}
